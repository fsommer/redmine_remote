use clap::{App, Arg, ArgMatches, SubCommand};

pub fn get_matches<'a>() -> ArgMatches<'a> {
    App::new("Redmine Remote")
        .version("0.0.1")
        .author("Florian Sommer <fsommer1986@gmail.com>")
        .about("Command line program for using the redmine api (see http://www.redmine.org/).")
        .arg(Arg::with_name("host")
             .long("host")
             .takes_value(true))
        .arg(Arg::with_name("apikey")
             .long("apikey")
             .takes_value(true))
        .subcommand(SubCommand::with_name("issues")
                    .about("Handles the issues sub api.")
                    .subcommand(SubCommand::with_name("list")
                                .about("List issues."))
                    .subcommand(SubCommand::with_name("create")
                                .about("Creates new issue.")
                                .arg(Arg::with_name("project-id")
                                     .required(true))
                                .arg(Arg::with_name("tracker-id")
                                     .required(true))
                                .arg(Arg::with_name("status-id")
                                     .required(true))
                                .arg(Arg::with_name("priority-id")
                                     .required(true))
                                .arg(Arg::with_name("subject")
                                     .required(true))
                                .arg(Arg::with_name("description")
                                     .required(true))
                                .arg(Arg::with_name("category-id")
                                     .required(true))
                                .arg(Arg::with_name("version-id")
                                     .required(true))
                                .arg(Arg::with_name("assigned-to-id")
                                     .required(true))
                                .arg(Arg::with_name("parent-issue-id")
                                     .required(true))
                                .arg(Arg::with_name("watcher-user-ids")
                                     .required(true))
                                .arg(Arg::with_name("is-private")
                                     .required(true))
                                .arg(Arg::with_name("estimated-hours")
                                     .required(true))))
        .subcommand(SubCommand::with_name("time_entries")
                    .about("Handles the time entries sub api.")
                    .subcommand(SubCommand::with_name("create")
                                .about("Creates new time entry.")
                                .arg(Arg::with_name("issue-id")
                                     .required(true))
                                .arg(Arg::with_name("hours")
                                     .required(true))
                                .arg(Arg::with_name("activity-id")
                                     .required(true))
                                .arg(Arg::with_name("comments")
                                     .required(true))))
        .get_matches()
}
